{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[['a', 'b'], ['a', 'c'], ['a', 'd'], ['b', 'c'], ['b', 'd'], ['c', 'd']]\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "# Combinations\n",
    "#  arr = [a b c d e] n = 3\n",
    "#  a  and 2 from [b c d e]\n",
    "#     ... and 1 from [c d e]\n",
    "#  b and 2 from [ c d e]\n",
    "#    and 1 frm [ d e]\n",
    "#  c and 2 from [d  e]\n",
    "#    and 1 from [d]\n",
    "#    and 1 from [e]\n",
    "\n",
    "\n",
    "def combo(arr, j):\n",
    "    if j == 1 :\n",
    "        tarr = []\n",
    "        for a in arr :\n",
    "            tarr.append([a])\n",
    "        return tarr\n",
    "    else :\n",
    "        tarr = []\n",
    "        for i in range(len(arr)) :\n",
    "            subarr = combo(arr[i+1:], j-1)\n",
    "            for s in subarr :\n",
    "                s.insert(0, arr[i])\n",
    "            tarr = tarr + subarr\n",
    "        return tarr\n",
    "            \n",
    "            \n",
    "out = combo (['a', 'b', 'c', 'd'], 2)\n",
    "print(out)\n",
    "print(len(out))\n",
    "            \n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
